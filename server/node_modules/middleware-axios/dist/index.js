"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const axios_1 = __importDefault(require("axios"));
const ArgsToConfig = {
    withBody: (method, [url, data, config]) => (Object.assign({ url,
        method,
        data }, config)),
    withoutBody: (method, [url, config]) => (Object.assign({ url,
        method }, config)),
};
const create = (instanceConfig) => {
    const instance = axios_1.default.create(instanceConfig);
    let request = instance.request.bind(instance);
    const publicApi = {
        // IMPORTANT: each method should call actual function from "request" variable
        request: config => request(config),
        get: (...args) => request(ArgsToConfig.withoutBody('get', args)),
        delete: (...args) => request(ArgsToConfig.withoutBody('delete', args)),
        head: (...args) => request(ArgsToConfig.withoutBody('head', args)),
        options: (...args) => request(ArgsToConfig.withoutBody('options', args)),
        post: (...args) => request(ArgsToConfig.withBody('post', args)),
        put: (...args) => request(ArgsToConfig.withBody('put', args)),
        patch: (...args) => request(ArgsToConfig.withBody('patch', args)),
    };
    const useMiddleware = (middleware) => {
        const wrapped = request;
        request = function (requestConfig) {
            return __awaiter(this, void 0, void 0, function* () {
                let promise;
                yield middleware(requestConfig, nextConfig => {
                    promise = wrapped(nextConfig);
                    // IMPORTANT: returns original promise here and don`t create another
                    return promise;
                }, instance.defaults);
                if (!promise) {
                    throw Error('Looks like one of your middleware functions is not called "next"');
                }
                // IMPORTANT: returns original promise here and don`t create another
                return promise;
            });
        };
        return wrapper;
    };
    const wrapper = Object.assign(Object.assign({}, publicApi), { axiosInstance: instance, use: useMiddleware });
    return wrapper;
};
exports.create = create;
